Criando o PWA com o Angular 5. Parte 1: Introdução ao framework, criando um aplicativo, hospedando-o nas páginas do github.

Instala o CLI
npm install -g @angular/cli

Cria novo projeto
ng new PWCat

cd PWCat
ng serve --open

app.component.ts

trocar o titulo
export class AppComponent {
  title = 'Progressive Web Cat';
}

Adicionar material

npm install --save @angular/material @angular/cdk

styles.css
@import '~@angular/material/prebuilt-themes/deeppurple-amber.css';

add normalize.css
npm install --save normalize.css

In styles.css:
@import '~normalize.css/normalize.css';

app.module.ts
import { MatToolbarModule } from '@angular/material';
import { MatToolbarModule } from '@angular/material';

app.component.html
<mat-toolbar color="primary">
  {{ title }}
</mat-toolbar>

generating components in Angular 5:

ng generate component img-card

app.module.ts
import { ImgCardComponent } from './img-card/img-card.component';
NgModule({
  declarations: [
    AppComponent,
    ImgCardComponent
  ],

<!-- src/app/app.component.html -->
<app-img-card></app-img-card>

// src/app/app.module.ts

import { 
  MatToolbarModule,
  MatCardModule 
} from '@angular/material';
...
@NgModule({
...
  imports: [
    BrowserModule,
    MatToolbarModule,
    MatCardModule
  ],
...
})

/ src/app/img-card/img-card.component.html
<mat-card>
  <img 
    src="https://cataas.com/cat/says/Progressive%20Web%20Cat" 
    alt="Cute cat"
    mat-card-image>
</mat-card>

/ src/app/img-card/img-card.component.ts
...
class CatImage {
  message: string;
  api: string;
  fontsize: number;
}
...

Agora podemos adicionar uma imagem de propriedade privada do tipo CatImage para ImgCardComponent . A propriedade src deve ser pública e do tipo string . Dê uma olhada no modo como usamos essas propriedades no método ngOnInit:

// src/app/img-card/img-card.component.ts
...
export class ImgCardComponent implements OnInit {
  
  private image: CatImage = {
    message: 'Progressive Web Cat',
    api: 'https://cataas.com/cat/says/',
    fontsize: 40
  };
  public src: string;
  ngOnInit() {
    this.src = this.image.api + this.image.message;
  }
...

Para tornar nosso botão vivo, devemos criar uma nova função (método público), que fará alguma mágica para nós. Eu chamei o meu generateSrc :

ngOnInit() {
  this.generateSrc();
}
generateSrc(): void {
  this.src = this.image.api + this.image.message +
    '?size=' + this.image.fontsize;
}

A palavra-chave void mostra que nossa função não tem nada para retornar. 
O tamanho é uma das opções de imagem fornecidas pela cataas.com api.

Hora de fazer algumas alterações na marcação do img-card . Substitua o URL longo de origem codificada pela propriedade do componente {{src}} . Para adicionar o listener de eventos ao botão do cartão, use o atributo (click) .

/ src/app/img-card/img-card.component.html
<mat-card>
  <mat-card-actions>
    <button 
      color="primary" 
      (click)="generateSrc()" // parentheses are important!
      mat-button 
      mat-raised-button>
      Give me another cat
    </button>
  </mat-card-actions>
  <img 
    src="{{ src }}" 
    alt="Cute cat"
    mat-card-image>
</mat-card>

Infelizmente, a imagem não está sendo atualizada quando clicamos no botão Gerar, porque na verdade o valor de src permanece inalterado. Vamos consertar isso adicionando um parâmetro de consulta falso com um timestamp.

// src/app/img-card/img-card.component.ts
...
public generateSrc(): void {
  this.src = this.image.api + this.image.message + 
    '?size=' + this.image.fontsize +
    '&ts=' + Date.now();
}

Depois de adicionar alguns estilos personalizados ...

// src/app/img-card/img-card.component.css
.mat-card {
  width: 400px;
  margin: 2rem auto;
}
.mat-card .mat-card-actions {
  padding-top: 0;
}
.mat-card .mat-button {
  margin: 0 auto;
  display: block;
}

… Finalmente vamos pegar nosso aplicativo de trabalho. Aproveite seus gatos!

Etapa 4. Hospedando nosso aplicativo no GitHub
4.1 Criando um novo repositório
Crie um novo repositório no github.com (sem nenhum arquivo init - para evitar conflitos no futuro). Dê um nome ao seu projeto e pressione um grande botão verde abaixo.

Vá até o terminal e execute o seguinte:

git add .
git commit -m "Upload project to github"
git remote add origin git@github.com:{username}/{repo name}.git
git push --set-upstream origin master

E é isso! Recarregue a página do repositório para ver seu código no github.

4.2 Criar uma versão de produção do aplicativo
Nós não precisamos mais de ' ng serve ', então desligue-o. Tempo para algumas opções de produção:

ng build --prod --base-href "/PWCat/"

Como resultado, podemos ver uma nova pasta '/ dist' com nosso aplicativo empacotado.

....

Etapa 1. Primeira Auditoria.
Assim. Precisamos descobrir como está o nosso aplicativo e onde os nossos pontos de semana acontecem. E tudo o que precisamos fazer é abrir nossas DevTools do Chrome e ir para a guia Auditorias, onde podemos encontrar uma ferramenta tão poderosa quanto o Lighthouse ?- o melhor diagnóstico de páginas da web.

inspecionar
audits
perform an audit
run audit

Etapa 2. Adicionando o shell do aplicativo
Um shell de aplicativo é a interface do usuário mínima que o usuário verá o mais rápido possível. O shell do aplicativo deve carregar muito rápido para capturar os olhos do usuário e fazê-lo esperar por todo o conteúdo.

O caminho fácil
As etapas acima são obrigatórias e, na maioria dos casos, redundantes, porque o CLI angular pode fazer todo o trabalho para nós na etapa de criação. Você se lembra de como geramos nosso aplicativo na Parte 1 ? Quando começamos, não ouvimos falar dos funcionários do serviço, por isso não adicionamos o seguinte sinalizador mágico:

ng new PWCat --service-worker

Use-o como um aplicativo nativo
Abra seu aplicativo no seu dispositivo de telefone usando o navegador Chrome. Observe o pop-up na parte inferior da guia.

Depois de pressionar o botão azul, você encontrará o ícone do aplicativo no espaço livre da sua tela inicial

E agora você pode usá-lo como um aplicativo nativo, você não precisa mais de um navegador e procurá-lo através do URL.

stado off-line
Você pode notar que o nosso aplicativo está funcionando mesmo se não houver conexão com a Internet, mas, infelizmente, não parece tão bom. Falta informação e cartão de imagem não nos agrada com qualquer cara de gato.

Para consertar isso, precisamos mudar um pouco a lógica do img-card controller tornando nosso botão mais personalizável. Quero que meu botão "Obter novo gato" seja desativado quando estiver off-line e informe ao usuário sobre a situação. Vamos descobrir quais atributos podem ser definidos com js:

// src/img-card/img-card.component.html
...
<button 
  color="{{ button.color }}" 
  (click)="generateSrc()" 
  disabled="{{ button.disabled }}"
  mat-button 
  mat-raised-button>
    {{ button.text }}
</button>
...

Crie uma nova classe e defina os tipos para cada propriedade:

// src/img-card/img-card.component.ts
...
class Button { 
  text: string;
  disabled: boolean;
  color: string;
}
...

Em seguida, crie uma nova propriedade pública de ImgCardComponent do tipo Button :
// src/img-card/img-card.component.ts
...
public button: Button = {
  text: 'Give me another cat',
  color: 'primary',
  disabled: false
};
...

Podemos verificar se estamos online com o objeto global navigator:

/ src/img-card/img-card.component.ts
...
ngOnInit() {
  this.src = this.image.api + this.image.message + 
    '?size=' + this.image.fontsize;
  if (!navigator.onLine) {
    this.button.text = 'Sorry, you\'re offline';
    this.button.disabled = true;
  }
}
...

A última coisa que temos a fazer é dizer ao service worker para armazenar em cache a imagem do gato. Na seção assets do sw config, adicione a propriedade urls

// src / ngsw-config.json
...
{ 
  "name": "assets", 
  "installMode": "lazy", 
  "updateMode": "prefetch", 
  "recursos": { 
    "files": [ 
      "/ assets / **" 
    ], 
    "urls": [ 
      " https://cataas.com/** " 
    ]
   } 
}

Mais uma vez, confirmar, reconstruir e empurrar. Atualize seu aplicativo, desligue a guia Wi-Fi e recarregue novamente. Não há mais downasaurs - apenas gatos fofos :)

E isso é finalmente tudo :)
Você ainda pode encontrar o código-fonte do meu aplicativo aqui . Você pode testá-lo on-line (e off-line) aqui .

https://nastyasmirnova.github.io/PWCat/





